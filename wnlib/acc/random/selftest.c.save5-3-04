/****************************************************************************

COPYRIGHT NOTICE:

  The source code in this file is provided free of charge
  to the author's consulting clients.  It is in the
  public domain and therefore may be used by anybody for
  any purpose.

AUTHOR:

  Bill Chapman

****************************************************************************/
#include <stdio.h>
#include <math.h>

#include "wnlib.h"
#include "wnargp.h"
#include "wnasrt.h"
#include "wnrnd.h"
#include "wnrndd.h"


bool wn_s_random_20_bits_false(int trials)
{

  for (  ;  trials > 0;  --trials)
  {
    if (! wn_random_n_bits(20))
    {
      return TRUE;
    }
  }

  return FALSE;
} /* wn_s_random_20_bits_false */


bool wn_s_nth_bit_set_20_times(int trials)
{
  int i, j;

  for (  ;  trials > 0;  --trials)
  {
    i = wn_random_mod_int(32);

    for (j = 0;  j < 20;  ++j)
    {
      if (! (wn_random_int() & (1 << i)))
      {
        break;
      }
    }

    if (j == 20)
    {
      return TRUE;
    }
  }

  return FALSE;
} /* wn_s_nth_bit_set_20_times */


bool wn_s_fail_diag_bits_always_set(int trials)
{
  int i, k;

  i = wn_random_mod_int(32);

  for (  ;  trials > 0;  --trials)
  {
    for (k = 0;  k < 20;  ++k)
    {
      if (!(wn_random_int() & (1 << ((i+k) % 32))))
      {
	break;
      }
    }

    if (20 == k)
    {
      return TRUE;
    }
  }

  return FALSE;
} /* wn_s_fail_diag_bits_always_set */


bool wn_s_two_in_a_row(int trials)
{
  for (  ;  trials > 0;  --trials)
  {
    if (wn_random_n_bits(20) == wn_random_n_bits(20))
    {
      return TRUE;
    }
  }

  return FALSE;
} /* wn_s_two_in_a_row */


int main(int argc,char *argv[])
{
  int trials, random_seed_arg;
  int sts;

  fprintf(stderr, "testing random stuff...\n");

  if (argc >= 2)
  {
    sts = sscanf(argv[1], "%d", &random_seed_arg);
    if (1 != sts)
    {
      fprintf(stderr, "Random seed \"%s\" should be an integer\n", argv[1]);
      return 1;
    }

    wn_seed_random_number_generator(random_seed_arg);
  }

  if (argc >= 3)
  {
    sts = sscanf(argv[2], "%d", &trials);
    if (1 != sts)
    {
      fprintf(stderr, "Trials \"%s\" should be an integer\n", argv[2]);
      return 1;
    }
  }
  else
  {
    trials = (int) (log(.9999) / log((1024*1024-1.0)/(1024*1024)));
    /**/			/* comes out to 1/10000 chance of TRUE */
  }

  wn_assert(!wn_s_random_20_bits_false(trials/4));
  wn_assert(!wn_s_nth_bit_set_20_times(trials/4));
  wn_assert(!wn_s_fail_diag_bits_always_set(trials/4));
  wn_assert(!wn_s_two_in_a_row(trials/4));

  fprintf(stderr,"  ok!!!!!!\n");  

  return 0;
} /* main */
