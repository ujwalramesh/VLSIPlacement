#!/usr/bin/perl -w

#     <<<<NOTE!!!!>>>>  The windows user doesn't have to understand or
# run this file.  It is just to be run by the developer to make the
# C files in the selftest directories before zipping wnlib for release.

#     This file is part of wnlib and as such is in the public domain and may
# be used by anybody for any purpose.  It comes as is, with no warrantee or
# guarantee whatsoever.

#			gen_selftest.pl

#     this loop copies the selftest.c files, translating
# ../acc/<dir>/selftest.c to selftest/wnst_<dir>.c for all source
# directories in ../acc.  It turns the main() routine into a named
# subroutine.  It also creates the new file
# selftest/selftest_main.c, which calls all these subroutines.

#     The idea is that all the selftests, instead of being separate programs
# to be run by a script, are now subroutines to be linked into a single
# executable.  This has two advantages:

#     - on windows, a single project/makefile for the selftest can be
# built with a single wave of the mouse, rather than having to go around
# to 24 directories and manually build a project/makefile for each one.

#     - on unix, they can easily be built into a single executable with
# wnmake1, and then valgrind (or purify) can then easily be used on the
# whole executable.

#     This code is in the public domain and may therefore be used by
# anybody for any purpose.

#     Written: 2004.08.07
#     Author:  Bill Chapman

use strict;	# just comment this line out if it's a problem

my ($p, $dirs_str, @dirs, @dirs2, $d, $st_main, $st_in, $st_out, $line, $eline);
my ($modify_warning);

$p = "gen_selftest.pl";

system 'make -s -f ../acc/makefile dirs';
$dirs_str = `cat dirs.txt`;
chomp $dirs_str;
@dirs = split / /, $dirs_str;

# filter out "side/mems" directory
@dirs2 = ();
for $d (@dirs) {
  push @dirs2, $d if ("side/mems" ne $d);
}
@dirs = @dirs2;

$modify_warning =
    "/*****************************************************************\n" .
    "**\n" .
    "**  Do not modify this file, it is autogenerated by $p.\n" .
    "**  Your changes will be lost.  You have been warned.\n" .
    "**\n" .
    "*****************************************************************/\n\n";

$st_main = "selftest/selftest_main.c";
unlink $st_main;
open ST_MAIN, ">$st_main" or die "$p couldn't open $st_main";

print ST_MAIN $modify_warning;

print ST_MAIN '#include <stdio.h>',  "\n";
print ST_MAIN '#include "wnlib.h"',  "\n";
print ST_MAIN '#include "wnasrt.h"', "\n";
print ST_MAIN '#include "wnmem.h"',  "\n";

foreach $d (@dirs) {
  $st_in  = "../acc/$d/selftest.c";
  if ("../acc/mem/selftest.c" eq $st_in) {
    $st_in = "../acc/mem/selftest_aux.c";
  }
  $st_out = "selftest/wnst_$d.c";
  unlink $st_out;

  if (-f $st_in) {
    open ST_IN, "<$st_in" or die "$p couldn't find $st_in\n";
    open ST_OUT, ">$st_out" or die "$p couldn't open $st_out";

    print ST_OUT $modify_warning;

    while ($line = <ST_IN>) {
      if (substr($line, 0, 9) eq "int main(") {
	substr($line, 0, 9) = "int wn_selftest_$d(";
	$eline = $line;
	chomp $eline;
	$eline =~ s/ *{//;
	print ST_MAIN "extern $eline;\n";
      }
      print ST_OUT $line;
    }

    close ST_OUT;
    close ST_IN;
  }
}

# now go and finish selftest/wnst_main.c.  Put in the main routine,
# and make subroutine calls to all the other selftests.

print ST_MAIN "\n";
print ST_MAIN "int main(int argc, char **argv) {\n";

foreach $d (@dirs) {
  $st_in  = "../acc/$d/selftest.c";
  if ("../acc/mem/selftest.c" eq $st_in) {
    $st_in = "../acc/mem/selftest_aux.c";
  }
  if (-f $st_in) {
    open ST_IN, "<$st_in" or die "$p couldn't find $st_in\n";

    while ($line = <ST_IN>) {
      if (substr($line, 0, 9) eq "int main(") {
        print ST_MAIN '  WN_GPBEGIN("no_free");', "\n";
	if (substr($line, 0, 13) eq "int main(void") {
	  print ST_MAIN "    (void) wn_selftest_$d();\n";
        } else {
	  print ST_MAIN "    (void) wn_selftest_$d(argc, argv);\n";
	}
	print ST_MAIN "  WN_GPEND();\n";
      }
    }

    close ST_IN;
  }
}

print ST_MAIN "\n";
print ST_MAIN '  printf("%s finished\n", argv[0]);', "\n";
print ST_MAIN "  return 0;\n";
print ST_MAIN "} /* main */\n";
close ST_MAIN;
