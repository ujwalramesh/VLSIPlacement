NAME
     wnanl -- simulated annealing package

SYNOPSIS
     wn_anneal(pevaluate_random_mutation,
               psave_mutation,paccept_saved_mutation,
               iterations)
     double (*pevaluate_random_mutation)();
     void (*psave_mutation)(),(*paccept_saved_mutation)();
     double iterations;

     wn_measure_temperature(&temperature,pevaluate_random_mutation,iterations)
     double temperature;
     double (*pevaluate_random_mutation)();
     double iterations;

     wn_anneal_from_start_temperature(pevaluate_random_mutation,
                                      psave_mutation,paccept_saved_mutation,
                                      iterations,
                                      start_temperature)
     double (*pevaluate_random_mutation)();
     void (*psave_mutation)(),(*paccept_saved_mutation)();
     double iterations,start_temperature;

     wn_bake_at_temperature(pevaluate_random_mutation,
                            psave_mutation,paccept_saved_mutation,
                            iterations,
                            temperature)
     double (*pevaluate_random_mutation)();
     void (*psave_mutation)(),(*paccept_saved_mutation)();
     double iterations,temperature;

DESCRIPTION
     This package provides a general simulated annealing [1] algorithm
     for use on complex combinatorial optimization problems. 
     Simulated annealing
     is a technique of last resort, and should be used only when other
     techniques, such as linear programming (see wnsplx), and 
     domain-specific algorithms, have not born fruit.  Generally,
     simulated annealing is of value only with combinatorial 
     optimization problems that are NP-complete [2], and even with these,
     approximation methods involving the above techniques are often superior.

     Simulated annealing finds a good solution to an optimization problem
     as follows.  The problem is presented, together with a feasible (legal)
     solution.  This solution might be randomly generated or it might
     be generated by some other optimization algorithm.  Mutations 
     (small, incremental changes) are applied to this solution, 
     hopefully improving it, until the algorithm terminates and 
     a good solution is reached.  

     Mutations are selected randomly (see wnrnd) and saved by the user-supplied
     routine (*pevaluate_random_mutation)().  (*pevaluate_random_mutation)()
     returns the amount of change in the objective function that the
     mutation would produce if it were accepted.  
     Decrease in the objective function is improvement; increase 
     is degradation.  Not all mutations presented by 
     (*pevaluate_random_mutation)()
     are accepted.  All improvements or zero-changes (non-degradations)
     are immediately accepted.  To avoid the algorithm getting
     stuck too soon, degradations are sometimes accepted, with 
     probability equal to the "temperature" of the system.  This
     is accomplished by choosing the best (least degrading) of 
     1/temperature degradations and accepting it.

     (*psave_mutation)() is a user-supplied routine which saves the 
     mutation produced by the most recent call to 
     (*pevaluate_random_mutation)().  (*paccept_saved_mutation)() is
     a user-supplied routine which accepts the mutation saved by the
     most recent call to (*psave_mutation)().  (*paccept_saved_mutation)()
     must keep track of the current state and the current objective function
     of the system.

     "wn_anneal" provides a complete simulated annealing optimization
     algorithm.  First, it measures temperature of the current
     solution using (*pevaluate_random_mutation)().  Then, starting
     with this measured temperature, it gradually (linearly with time) lowers
     the temperature to 0  (at 0, no degradations are accepted).  It
     calls user-supplied routines at most "iterations" times.

     "wn_measure_temperature" measures the temperature of the current
     solution using (*pevaluate_random_mutation)().  The current temperature
     is placed in "temperature".  "wn_measure_temperature" makes 
     "iterations" calls to (*pevaluate_random_mutation)().

     "wn_anneal_from_start_temperature" lowers the temperature gradually
     (linearly with time) from "start_temperature"
     to 0.  It calls user-supplied routines at most "iterations" times.

     "wn_bake_at_temperature" runs the system for "iterations" time
     at "temperature".

RESOURCES
     All these routines run with 

       WORST and AVERAGE CASE:

         time = iterations*<time for slowest caller-supplied routine>
         stack memory = 1
         dynamic memory = 0

     where "iterations" is an argument to the routine.  

     Each caller-supplied routine is called at most "iteration" times.

     The number of iterations required for "wn_anneal" to reach 
     optimal or good solutions is problem specific and very difficult
     to predict in advance.  Generally, simulated annealing based 
     algorithms are 
     much faster than exhaustive search and variations on exhaustive
     search, such as random search and "branch and bound".  If time
     is limited, simulated annealing generally finds much better 
     solutions than these techniques.

BUGS
     This code is still experimental, and subject to change.

SEE ALSO
     wnrnd, wnsplx

REFERENCES
     [1] Original Science paper

     [2] Garey & Johnson

AUTHOR
     Will Naylor


