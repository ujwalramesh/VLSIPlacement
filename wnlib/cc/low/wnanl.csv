/**********************************************************************

wn_anneal(pevaluate_random_mutation,
	  paccept_mutation,
	  ptemperature_function,
	  iterations)

wn_measure_anneal_temperature(&temperature,pevaluate_random_mutation,iterations)

wn_get_anneal_statistics(&mean,&sdev,pevaluate_random_mutation,iterations)

**********************************************************************/

#include "wnlib.h"
#include "wnmax.h"
#include "wninr.h"
#include "wnio.h"
#include "wnsqr.h"



double wn_anneal_time,wn_anneal_temperature;  /* export these values */



wn_anneal(pevaluate_random_mutation,
	  paccept_mutation,
	  ptemperature_function,
          iterations)

double (*pevaluate_random_mutation)(),
       (*ptemperature_function)();
void (*paccept_mutation)();
double iterations;

{
  extern double exp();
  double step,delta,prob,
	 save_anneal_time,save_anneal_temperature;

  save_anneal_time = wn_anneal_time;
  save_anneal_temperature = wn_anneal_temperature;

  step = 1.0/(iterations-1.0);

  for(wn_anneal_time=1.0;wn_anneal_time >= 0.0;wn_anneal_time -= step)
  {
    wn_anneal_temperature = (*ptemperature_function)(wn_anneal_time);

    delta = (*pevaluate_random_mutation)();

    if(delta <= 0.0)  /* mutation is not a degradation */
    {
      (*paccept_mutation)();
    }
    else if(wn_anneal_temperature > 0.0)  
    {
      prob = exp(-delta/wn_anneal_temperature);

      if(wn_true_with_probability(prob))
      {
        (*paccept_mutation)();
      }
    }
  }

  wn_anneal_time = save_anneal_time;
  wn_anneal_temperature = save_anneal_temperature;
}



wn_get_anneal_statistics(pmean,psdev,pevaluate_random_mutation,iterations)

double *pmean,*psdev;
double (*pevaluate_random_mutation)();
double iterations;

{
  extern double sqrt();
  double i,sum,square_sum,delta;

  sum = square_sum = 0.0;

  for(i=0.0;i<iterations;i+=1.0)
  {
    delta = (*pevaluate_random_mutation)();

    sum += delta;
    square_sum += wn_square(delta);
  }

  *pmean = sum/iterations;
  *psdev = sqrt((square_sum-wn_square(sum)/iterations)/(iterations-1.0));
}



wn_measure_anneal_temperature(ptemperature,pevaluate_random_mutation,iterations)

double *ptemperature;
double (*pevaluate_random_mutation)();
double iterations;

{
  double mean,sdev;

  wn_get_anneal_statistics(&mean,&sdev,pevaluate_random_mutation,iterations);

  if(mean <= sdev/2.0)
  {
    mean = sdev/2.0;
  }

  *ptemperature = wn_square(sdev)/(2*mean);
}




